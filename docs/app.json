[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(scales)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(thematic)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(echarts4r)\n\nlibrary(countrycode)\n\n# Setup -------------------------------------------------------------------\n\nl = read_csv(\"data/l.csv\")\npop = read_csv(\"data/pop.csv\")\ntfr = read_csv(\"data/tfr.csv\")\n\ntidy_l = l %>%\n  tidyr::pivot_longer(.,cols = c(!country), names_to = \"Year\", values_to = \"obsA\") %>%\n  drop_na(obsA) %>%\n  mutate(\n    Year = stringr::str_replace_all(Year,\"[A-Z]\", \"\")\n  )\n\ntidy_pop = pop %>%\n  tidyr::pivot_longer(.,cols = c(!country), names_to = \"Year\", values_to = \"obsB\") %>%\n  drop_na(obsB)\n\ntidy_tfr = tfr %>%\n  tidyr::pivot_longer(.,cols = c(!country), names_to = \"Year\", values_to = \"obsC\") %>%\n  drop_na(obsC)\n  \n\ntotal = dplyr::full_join(tidy_l,tidy_pop,by = c(\"country\", \"Year\"))\n\ntotal1 = dplyr::full_join(total, tidy_tfr,by = c(\"country\", \"Year\"))\n\ntotal$iso2c = countrycode::countrycode(total$country,origin = \"country.name\", \"iso2c\")\n\n# Function to create a dropdown option with flag and country name\n\ndropdownOption <- function(country) {\n  country_code <- countrycode(country, \"country.name\", \"iso2c\")\n  flag_html <- flag(country_code)\n  tagList(\n    shiny::tags$img(src = flag_html, style = \"width: 20px; height: 15px; margin-right: 5px;\"),\n    country\n  )\n}\n\nui <- page_navbar(\n  theme =  bs_theme(version = 5),footer = \"stesiam, 2024\",\n  window_title = \"Ageing Dashboard\",\n  \n    title = \"Ageing Population\",\n    nav_spacer(),\n    nav_item(\n      tags$a(\n        tags$span(\n          bsicons::bs_icon(\"code-slash\"), \"Source code\"\n        ),\n        href = \"https://github.com/rstudio/bslib/tree/main/inst/examples/flights\",\n        target = \"_blank\"\n      )\n    ),\n    nav_item(\n      input_dark_mode(id = \"dark_mode\", mode = \"light\")\n    ),\n    \n  \n  \n  sidebar = sidebar(\n    selectInput(\"country\", \"Select a Country:\",\n                choices = unique(total$country),\n                selected = \"Greece\"\n    ),\n    br(),\n    sliderInput(\"year\", \"Select Year:\", min = 1810, max = 2060, step = 5, value = 1950)\n  ),\n  layout_columns(\n    fill = FALSE,\n    value_box(\n      title = \"Life Expectancy\",\n      value = textOutput(\"lifeExpectancy\"),\n      showcase = icon(\"person-cane\")\n    ),\n    value_box(\n      title = \"Total Fertility Rate\",\n      value = textOutput(\"tfr\"),\n      showcase = icon(\"baby\")\n    ),\n    value_box(\n      title = \"Total Population\",\n      value = textOutput(\"totalPopulation\"),\n      showcase = icon(\"people-group\")\n    )\n  ),\n  layout_columns(\n    navset_card_tab(\n      full_screen = TRUE,\n      title = \"Historical Trends by Country\",\n      nav_panel(\n        \"Life Exp.\",\n        echarts4rOutput(\"plot\")\n      ),\n      nav_panel(\n        \"TFR\",\n        echarts4rOutput(\"tfr_line\")\n      )\n    ),\n    card(full_screen = T,\n         card_header(\"Map\"),\n         echarts4rOutput(\"map\")\n    )\n )\n)\n\n\n# Change ggplot2's default \"gray\" theme\ntheme_set(theme_bw(base_size = 16))\n\n\n\nserver <- function(input, output, session) {\n  filtered_mean = reactive({\n    \n    # Filter data based on selected country\n    filtered_data <- subset(total1, country == input$country & Year == input$year)\n    \n    # Calculate mean\n    life_exp <- mean(filtered_data$obsA)\n    pop = filtered_data$obsB\n    tfr = filtered_data$obsC\n    # Return mean value\n    \n    output = list(life_exp, pop, tfr)\n    return(output)\n  })\n  \n  output$lifeExpectancy <- renderText({\n    round(filtered_mean()[[1]],2)\n  })\n  \n  output$totalPopulation <- renderText({\n    filtered_mean()[[2]]\n  })\n  \n  output$tfr <- renderText({\n    filtered_mean()[[3]]\n  })\n  \n  observe({\n    # This observer ensures that the reactive expression is re-run\n    # whenever the value of input$country changes\n    filtered_mean()\n  })\n  \n  filter_country = reactive({\n    filtered_data <- subset(total1, country == input$country)\n    \n    return(filtered_data)\n  })\n  \n  output$plot = renderEcharts4r({\n    filter_country() |>\n      e_charts(Year) |> \n      e_line(obsA) |>\n      e_legend(show = FALSE) |>\n      e_axis_labels(x = \"Years\") |>\n      e_title(\"Life Expectancy\") |> \n      e_theme(\"infographic\") |>  # theme\n      e_tooltip(trigger = \"axis\", backgroundColor = \"#becfff\")\n  })\n  \n  \noutput$tfr_line = renderEcharts4r({\n  filter_country() |>\n    e_charts(Year) |> \n    e_line(obsC) |>\n    e_legend(show = FALSE) |>\n    e_axis_labels(x = \"Years\") |>\n    e_title(\"Total Fertility Rate\") |> \n    e_theme(\"infographic\") |>  # theme\n    e_tooltip(trigger = \"axis\", backgroundColor = \"#becfff\")\n})\n  \n  filter_year = reactive({\n    filtered_data <- subset(total1, Year == input$year)\n    \n    return(filtered_data)\n  })\n  \n  output$map = renderEcharts4r({\n    filter_year() |> \n        e_charts(country) |> \n        e_map(obsA) |> \n        e_visual_map(obsA)\n  })\n  \n  output$selected_country = renderText({\n    print(input$country)\n  })\n  \n}\n  \n\nshinyApp(ui, server)","type":"text"}]
